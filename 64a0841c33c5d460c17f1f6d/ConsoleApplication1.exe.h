/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'ConsoleApplication1.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _s_ThrowInfo;
union _LARGE_INTEGER;
struct _EXCEPTION_RECORD;

/* 1 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 3 */
struct RUNTIME_FUNCTION
{
  void *__ptr32 FunctionStart;
  void *__ptr32 FunctionEnd;
  void *__ptr32 UnwindInfo;
};

/* 4 */
struct UNWIND_INFO_HDR
{
  char Ver3_Flags;
  char PrologSize;
  char CntUnwindCodes;
  char FrReg_FrRegOff;
};

/* 5 */
struct UNWIND_CODE
{
  char PrologOff;
  char OpCode_OpInfo;
};

/* 6 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 7 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 9 */
typedef const struct _s_ThrowInfo ThrowInfo;

/* 8 */
typedef ThrowInfo _ThrowInfo;

/* 11 */
typedef int PMFN;

/* 10 */
#pragma pack(push, 4)
struct _s_ThrowInfo
{
  unsigned int attributes;
  PMFN pmfnUnwind;
  int pForwardCompat;
  int pCatchableTypeArray;
};
#pragma pack(pop)

/* 13 */
typedef void (__cdecl *_PVFV)();

/* 12 */
#pragma pack(push, 8)
struct _onexit_table_t
{
  _PVFV *_first;
  _PVFV *_last;
  _PVFV *_end;
};
#pragma pack(pop)

/* 15 */
typedef unsigned int DWORD;

/* 14 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 16 */
typedef union _LARGE_INTEGER LARGE_INTEGER;

/* 19 */
typedef int LONG;

/* 18 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 20 */
typedef __int64 LONGLONG;

/* 17 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 23 */
typedef unsigned __int64 ULONGLONG;

/* 22 */
struct _SLIST_HEADER::$2AAD3A9E0F86A5BF9BE50654CA710F62
{
  ULONGLONG Alignment;
  ULONGLONG Region;
};

/* 24 */
struct _SLIST_HEADER::$F9F9EB832D628D73E611400623F67F2B
{
  unsigned __int64 Depth : 16;
  unsigned __int64 Sequence : 48;
  unsigned __int64 Reserved : 4;
  unsigned __int64 NextEntry : 60;
};

/* 21 */
union __declspec(align(16)) _SLIST_HEADER
{
  struct
  {
    ULONGLONG Alignment;
    ULONGLONG Region;
  };
  struct _SLIST_HEADER::$F9F9EB832D628D73E611400623F67F2B HeaderX64;
};

/* 26 */
typedef unsigned __int64 DWORD64;

/* 27 */
typedef unsigned __int16 WORD;

/* 32 */
typedef unsigned __int8 BYTE;

/* 34 */
struct __declspec(align(16)) _M128A
{
  ULONGLONG Low;
  LONGLONG High;
};

/* 33 */
typedef struct _M128A M128A;

/* 31 */
struct __declspec(align(16)) _XSAVE_FORMAT
{
  WORD ControlWord;
  WORD StatusWord;
  BYTE TagWord;
  BYTE Reserved1;
  WORD ErrorOpcode;
  DWORD ErrorOffset;
  WORD ErrorSelector;
  WORD Reserved2;
  DWORD DataOffset;
  WORD DataSelector;
  WORD Reserved3;
  DWORD MxCsr;
  DWORD MxCsr_Mask;
  M128A FloatRegisters[8];
  M128A XmmRegisters[16];
  BYTE Reserved4[96];
};

/* 30 */
typedef struct _XSAVE_FORMAT XSAVE_FORMAT;

/* 29 */
typedef XSAVE_FORMAT XMM_SAVE_AREA32;

/* 35 */
struct _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414
{
  M128A Header[2];
  M128A Legacy[8];
  M128A Xmm0;
  M128A Xmm1;
  M128A Xmm2;
  M128A Xmm3;
  M128A Xmm4;
  M128A Xmm5;
  M128A Xmm6;
  M128A Xmm7;
  M128A Xmm8;
  M128A Xmm9;
  M128A Xmm10;
  M128A Xmm11;
  M128A Xmm12;
  M128A Xmm13;
  M128A Xmm14;
  M128A Xmm15;
};

/* 28 */
union _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB
{
  XMM_SAVE_AREA32 FltSave;
  struct
  {
    M128A Header[2];
    M128A Legacy[8];
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
  };
};

/* 25 */
struct __declspec(align(16)) _CONTEXT
{
  DWORD64 P1Home;
  DWORD64 P2Home;
  DWORD64 P3Home;
  DWORD64 P4Home;
  DWORD64 P5Home;
  DWORD64 P6Home;
  DWORD ContextFlags;
  DWORD MxCsr;
  WORD SegCs;
  WORD SegDs;
  WORD SegEs;
  WORD SegFs;
  WORD SegGs;
  WORD SegSs;
  DWORD EFlags;
  DWORD64 Dr0;
  DWORD64 Dr1;
  DWORD64 Dr2;
  DWORD64 Dr3;
  DWORD64 Dr6;
  DWORD64 Dr7;
  DWORD64 Rax;
  DWORD64 Rcx;
  DWORD64 Rdx;
  DWORD64 Rbx;
  DWORD64 Rsp;
  DWORD64 Rbp;
  DWORD64 Rsi;
  DWORD64 Rdi;
  DWORD64 R8;
  DWORD64 R9;
  DWORD64 R10;
  DWORD64 R11;
  DWORD64 R12;
  DWORD64 R13;
  DWORD64 R14;
  DWORD64 R15;
  DWORD64 Rip;
  union
  {
    XMM_SAVE_AREA32 FltSave;
    struct
    {
      M128A Header[2];
      M128A Legacy[8];
      M128A Xmm0;
      M128A Xmm1;
      M128A Xmm2;
      M128A Xmm3;
      M128A Xmm4;
      M128A Xmm5;
      M128A Xmm6;
      M128A Xmm7;
      M128A Xmm8;
      M128A Xmm9;
      M128A Xmm10;
      M128A Xmm11;
      M128A Xmm12;
      M128A Xmm13;
      M128A Xmm14;
      M128A Xmm15;
    };
  };
  M128A VectorRegister[26];
  DWORD64 VectorControl;
  DWORD64 DebugControl;
  DWORD64 LastBranchToRip;
  DWORD64 LastBranchFromRip;
  DWORD64 LastExceptionToRip;
  DWORD64 LastExceptionFromRip;
};

/* 38 */
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 37 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 42 */
typedef struct _CONTEXT *PCONTEXT;

/* 36 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 40 */
typedef void *PVOID;

/* 41 */
typedef unsigned __int64 ULONG_PTR;

/* 39 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 46 */
typedef unsigned __int16 wchar_t;

/* 45 */
typedef wchar_t WCHAR;

/* 44 */
typedef WCHAR *LPWSTR;

/* 47 */
typedef BYTE *LPBYTE;

/* 48 */
typedef void *HANDLE;

/* 43 */
struct _STARTUPINFOW
{
  DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 50 */
typedef ULONG_PTR SIZE_T;

/* 49 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 51 */
struct std::ios_base;

/* 52 */
struct std::_Lockit;

/* 53 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

